@page "/apitesting"
@using System.Text.RegularExpressions;
@using HtmlAgilityPack
@using WebScraper.Data
@using WebScraper.Data.Plugins
@using System.Net
@using Newtonsoft.Json.Linq
@using WebScraper.Data.ApiData

@inject Blazored.SessionStorage.ISessionStorageService sessionStorage

<div class="container">
    <AuthorizeView>
        <Authorized>
            <h1 class="text-center">Testing API</h1>
            
            <div class="row">

                <div class="col-sm-12">
                    <h2 class="text-center">@_feedback</h2>
                </div>

                <div class="col-sm-3">
                    <button @onclick="@GetSerps" type="button" class="btn btn-lg btn-primary">Get Serps</button>

                    @foreach (var serp in resultSerps)
                    {
                        <p class="mt-2">Keyword: @serp.Keyword | Url: @serp.Url</p>
                        <ul class="list-group">
                            @for (int i = 0; i < serp.Positions.Count; i++)
                            {
                                <li class="list-group-item">Date: @serp.Dates[i] | Position: @serp.Positions[i]</li>
                            }
                        </ul>
                    }
                </div>

                <div class="col-sm-3">
                    <button @onclick="@GetHealths" type="button" class="btn btn-lg btn-primary">Get Health</button>
                    <p class="mt-2">Url: @resultHealth.Url</p>
                    <ul class="list-group">
                        @for (int i = 0; i < resultHealth.Dates.Count; i++)
                        {
                            <li class="list-group-item">Date: @resultHealth.Dates[i]</li>
                            <li class="list-group-item">All links: @resultHealth.NumOfAllLinks[i]</li>
                            <li class="list-group-item">Broken links: @resultHealth.NumOfBrokenLinks[i]</li>
                            <li class="list-group-item">Blocked links: @resultHealth.NumOfBlockedLinks[i]</li>
                            <li class="list-group-item">Long descriptions: @resultHealth.NumOfLongDescriptions[i]</li>
                            <li class="list-group-item">Short descriptions: @resultHealth.NumOfShortDescriptions[i]</li>
                            <li class="list-group-item">Empty descriptions: @resultHealth.NumOfEmptyDescriptions[i]</li>
                            <li class="list-group-item">All descriptions: @resultHealth.NumOfAllDescriptions[i]</li>
                            <li class="list-group-item">Healthy descriptions: @resultHealth.NumOfHealthyDescriptions[i]</li>
                            <li class="list-group-item">..etc</li>
                        }
                    </ul>
                </div>

                <div class="col-sm-3">
                    <button @onclick="@PostSerp" type="button" class="btn btn-lg btn-primary">Post Serp</button>
                    <p>Hardcoded data is being inserted here</p>
                </div>

                <div class="col-sm-3">
                    <button @onclick="@PostHealth" type="button" class="btn btn-lg btn-primary">Post Health</button>
                    <p>Hardcoded data is being inserted here</p>
                </div>

                <div class="col-sm-3">
                    <button @onclick="@DeleteSerps" type="button" class="btn btn-lg btn-primary">Delete Serp</button>
                    <p>Deletes all serp data for this user</p>
                </div>

                <div class="col-sm-3">
                    <button @onclick="@DeleteHealths" type="button" class="btn btn-lg btn-primary">Delete Health</button>
                    <p>Deletes all health data for this user</p>
                </div>

            </div>
        </Authorized>
        <NotAuthorized>
            <h1 class="text-center">Please login</h1>
        </NotAuthorized>
    </AuthorizeView>
</div>


@code{
    private string _feedback { get; set; } = "";
    private JObject _response { get; set; }

    private List<Serp> resultSerps { get; set; } = new List<Serp>();
    private HealthAnalysis resultHealth { get; set; } = new HealthAnalysis();


    //GETS
    private async Task GetSerps()
    {
        _feedback = "Loading..";

        RequestService requester = new RequestService();
        var username = await sessionStorage.GetItemAsync<string>("username");
        _response = requester.Get("https://webscraperapi.herokuapp.com/api/serp/" + username);

        foreach (var responseSerp in _response["data"])
        {
            Serp serp = new Serp(responseSerp);
            resultSerps.Add(serp);
        }

        _feedback = (string)_response["message"];
    }

    private async Task GetHealths()
    {
        _feedback = "Loading..";

        RequestService requester = new RequestService();
        var username = await sessionStorage.GetItemAsync<string>("username");
        _response = requester.Get("https://webscraperapi.herokuapp.com/api/health/" + username);

        resultHealth = new HealthAnalysis(_response["data"]);
        _feedback = (string)_response["message"];
    }

    //POSTS
    private async Task PostSerp()
    {

        _feedback = "Loading..";

        var username = await sessionStorage.GetItemAsync<string>("username");

        //modify what you insert here
        SerpPost newSerp = new SerpPost();
        newSerp.Keyword = "laptops for sale houston";
        newSerp.Url = "http://mysite.com";
        newSerp.Position = 23;
        newSerp.Date = "2020-06-03"; //year-month-day
        newSerp.Username = username;

        var data = newSerp.ConvertToJObject();

        RequestService requester = new RequestService();
        string dataStr = data.ToString(Newtonsoft.Json.Formatting.None);
        _response = requester.Post("https://webscraperapi.herokuapp.com/api/serp", dataStr, "application/json");

        _feedback = (string)_response["message"];
    }

    private async Task PostHealth()
    {

        _feedback = "Loading..";

        var username = await sessionStorage.GetItemAsync<string>("username");

        //modify what you insert here
        HealthPost newHealth = new HealthPost();
        newHealth.Date = "2020-06-01"; //year-month-day
        newHealth.Url = "http://mywebsite.com";
        newHealth.Username = username;
        newHealth.NumOfAllLinks = 20;
        newHealth.NumOfAllTitles = 10;
        newHealth.NumOfBlockedLinks = 5;
        newHealth.NumOfBrokenLinks = 3;
        newHealth.NumOfEmptyTitles = 2;
        newHealth.NumOfHealthyLinks = 12;
        newHealth.NumOfHealthyTitles = 1;
        newHealth.NumOfImgsWithNoAlt = 0;
        newHealth.NumOfLinksWithIssues = 2;
        newHealth.NumOfLongTitles = 1;
        newHealth.NumOfAllTitles = 15;
        newHealth.NumOfLongTitles = 5;
        newHealth.NumOfRedirectLinks = 3;
        newHealth.NumOfEmptyTitles = 2;
        newHealth.NumOfShortTitles = 3;
        newHealth.NumOfAllDescriptions = 11;
        newHealth.NumOfHealthyDescriptions = 1;
        newHealth.NumOfLongDescriptions = 24;
        newHealth.NumOfShortDescriptions = 10;
        newHealth.NumOfEmptyDescriptions = 1;

        var data = newHealth.ConvertToJObject();

        RequestService requester = new RequestService();
        string dataStr = data.ToString(Newtonsoft.Json.Formatting.None);
        _response = requester.Post("https://webscraperapi.herokuapp.com/api/health", dataStr, "application/json");
        
        _feedback = (string)_response["message"];
    }

    //DELETES
    private async Task DeleteSerps()
    {
        _feedback = "Loading..";

        RequestService requester = new RequestService();
        var username = await sessionStorage.GetItemAsync<string>("username");
        _response = requester.Delete("https://webscraperapi.herokuapp.com/api/serp/" + username);
        _feedback = (string)_response["message"];
    }
    
    private async Task DeleteSerps(string keyword)
    {
        _feedback = "Loading..";

        RequestService requester = new RequestService();
        var username = await sessionStorage.GetItemAsync<string>("username");
        _response = requester.Delete("https://webscraperapi.herokuapp.com/api/serp/" + username + "/" + keyword);
        _feedback = (string)_response["message"];
    }

    private async Task DeleteHealths()
    {
        _feedback = "Loading..";

        RequestService requester = new RequestService();
        var username = await sessionStorage.GetItemAsync<string>("username");
        _response = requester.Delete("https://webscraperapi.herokuapp.com/api/health/" + username);
        _feedback = (string)_response["message"];
    }
}