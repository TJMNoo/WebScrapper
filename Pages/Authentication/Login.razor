@page "/login"

@using WebScraper.Data
@using WebScraper.Data.Authentication
@using Newtonsoft.Json.Linq

@inject AuthenticationStateProvider AuthenticationStateProvider
@inject NavigationManager NavigationManager
@inject Blazored.SessionStorage.ISessionStorageService sessionStorage

<div class="jumbotron" style="background-color: #f1f1f1">
    <h1 class="text-center" style="margin-top: 20px; font-size: 60px; font-weight: 700;">Login</h1>

    <form onsubmit="return false;" class="w-50 text-center mx-auto">
        <div class="form-group text-left">
            <label for="username" style="font-size: 22px;">Username:</label>
            <input @bind="_username" @onkeyup="KeyPressLoadHtmlInput" class="form-control" type="text" id="username" placeholder="Your username" style="font-size: 22px; padding: 8px; height: auto;" />
        </div>
        <div class="form-group text-left">
            <label for="password" style="font-size: 22px;">Password:</label>
            <input @bind="_password" @onkeyup="KeyPressLoadHtmlInput" class="form-control" type="password" id="password" placeholder="Your password" style="font-size: 22px; padding: 8px; height: auto;"/>
        </div>

        <button @onclick="@ValidateUser" type="button" class="btn btn-primary btn-lg" style="font-size: 32px; padding: 18px; height: auto; margin-top: 40px; border-radius: 5%;">Login</button>
        <p class="mt-3" style="color: red;">@_feedback</p>
    </form>
</div>
@code {
    private string _username { get; set; } = "";
    private string _password { get; set; } = "";
    private string _feedback { get; set; } = "";

    private JObject _response { get; set; }


    private async Task ValidateUser()
    {
        _feedback = "Loading..";
        RequestService requester = new RequestService();

        JObject data = new JObject();
        data["Username"] = _username;
        data["Password"] = _password;

        string dataStr = data.ToString(Newtonsoft.Json.Formatting.None);

        _response = requester.Post("https://webscraperapi.herokuapp.com/api/User/login", dataStr, "application/json");
        if ((string)_response["status"] != "200")
        {
            _feedback = (string)_response["message"];
        }
        else
        {
            ((CustomAuthenticationStateProvider) AuthenticationStateProvider).MarkUserAsAuthenticated(_username);
            NavigationManager.NavigateTo("/");

            string token = (string) _response["token"];
            await sessionStorage.SetItemAsync("token", token);
            await sessionStorage.SetItemAsync("username", _username);
        }
    }

    async Task KeyPressLoadHtmlInput(KeyboardEventArgs e)
    {
        if (e.Key == "Enter")
        {
            await ValidateUser();
        }
    }
}
