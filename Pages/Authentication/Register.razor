@page "/register"

@using System.ComponentModel
@using Newtonsoft.Json.Linq
@using WebScraper.Data
@using WebScraper.Data.Authentication

@inject AuthenticationStateProvider AuthenticationStateProvider
@inject NavigationManager NavigationManager
@inject Blazored.SessionStorage.ISessionStorageService sessionStorage

<h1 class="text-center mt-3">Register</h1>
<form onsubmit="return false;" class="w-50 text-center mx-auto">
    <div class="form-group text-left">
        <label for="email">Email:</label>
        <input @bind="_email" class="form-control" type="email" id="email" placeholder="Your email" />
    </div>
    <div class="form-group text-left">
        <label for="username">Username:</label>
        <input @bind="_username" class="form-control" type="text" id="username" placeholder="Your username" />
    </div>
    <div class="form-group text-left">
        <label for="username">Password:</label>
        <input @bind="_password" class="form-control" type="password" id="password" placeholder="Your password" />
    </div>
    <button @onclick="@ValidateUser" type="button" class="btn btn-primary btn-lg">Register</button>

    <p class="mt-3" style="color: red;">@_feedback</p>
</form>


@code {
    private string _email { get; set; } = "";
    private string _username { get; set; } = "";
    private string _password { get; set; } = "";
    private string _feedback { get; set; } = "";

    private JObject _response { get; set; }

    private async Task ValidateUser()
    {
        _feedback = "Loading..";
        RequestService requester = new RequestService();

        JObject data = new JObject();
        data["Email"] = _email;
        data["Username"] = _username;
        data["Password"] = _password;

        string dataStr = data.ToString(Newtonsoft.Json.Formatting.None);

        _response = requester.Post("https://webscraperapi.herokuapp.com/api/User", dataStr, "application/json");
        if ((string)_response["status"] != "200")
        {
            _feedback = (string)_response["message"];
        }
        else
        {
            ((CustomAuthenticationStateProvider)AuthenticationStateProvider).MarkUserAsAuthenticated(_username);
            NavigationManager.NavigateTo("/");

            string token = (string)_response["token"];
            await sessionStorage.SetItemAsync("token", token);
            await sessionStorage.SetItemAsync("username", _username);
        }
    }
}