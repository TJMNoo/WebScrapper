@page "/"
@using System.Text.RegularExpressions;
@using HtmlAgilityPack
@using WebScraper.Data
@using System.Security.Policy
@using OpenQA.Selenium
@using WebScraper.Data.FakePlugins
@inject IJSRuntime JSRuntime
@inject IToastService ToastService
@inject TraverseService Traverse
@inject ChromeService Chrome

<div class="container" style="width: 70%;">
    <h1 class="text-center" style="margin-bottom: 40px;">Web Scraper</h1>

    <form onsubmit="return false;">
        <div class="input-group pb-4">
            <div class="input-group-prepend">
                <span class="input-group-text" id="url-addon">URL</span>
            </div>

            <input @bind="PageUrl" @onkeyup="KeyPressLoadHtmlInput" type="text" class="form-control" id="url_link"/>
            <span class="input-group-btn ml-2">
                @if (LoadingButton)
                {
                    <button class="btn btn-primary" type="button" disabled>
                        <span class="spinner-border spinner-border-sm" role="status" aria-hidden="true"></span>
                        Loading...
                    </button>
                }
                else
                {
                    <button @onclick="@LoadHtml" class="btn btn-outline-primary" type="button">Get url!</button>
                }
            </span>
        </div>
        <div class="form-check form-check-inline mt-2">
            <label for="show_html" class="form-check-label mr-2">Show HTML</label>
            <input type="checkbox" class="form-check-input pull-right" id="show_html" @bind="ShowHtml" style="width: 15px; height: 15px;"/>

            <label for="follow_through" class="form-check-label mr-2">Follow through</label>
            <input @bind="FollowThrough" type="checkbox" class="form-check-input pull-right" id="follow_through" style="width: 15px; height: 15px;"/>
        </div>
        @if (FollowThrough)
        {
            <label for="width" class="form-check-label mr-2">Width/Depth: </label>
            <input @bind="MaxWidth" @onkeyup="KeyPressLoadHtmlInput" type="text" class="form-control w-25 d-inline" id="width"/>
            <p class="d-inline">@Feedback</p>
        }
        <button @onclick="@(() => DownloadHtmlFile("myHtmlDownload.txt"))" class="btn btn-primary mr-2" style="float:right;">HTML download</button>
    </form>

    @if (FollowThrough)
    {
        <div class="row mt-4">
            <div class="col-6">
                <h2>Pages</h2>
                <ul class="list-group">
                    @for (int i = 0; i < Traverse.AllUrls.Count; i++) //don't do foreach
                    {
                        int n = Traverse.AllUrls.Count;
                        string urlString = Traverse.AllUrls[n - i - 1];
                        <li class="list-group-item d-flex justify-content-between align-items-center">
                            <a href="@Traverse.AllUrls[n - i - 1]" style="overflow: hidden;">@Traverse.AllUrls[n - i - 1]</a>
                            <span @onclick="@(() => SaveUrl(urlString + ".txt", urlString))" class="badge badge-primary badge-pill">download txt</span>
                        </li>
                    }
                </ul>
            </div>
            
            <div class="col-6">
                <h2>Business logic</h2>
                <ul class="list-group">
                    @for (int i = 0; i < Traverse.BusinessLogicResults.Count; i++)
                    {
                        int n = Traverse.BusinessLogicResults.Count;
                        string urlString = Traverse.BusinessLogicResults[n - i - 1];
                        <li class="list-group-item d-flex justify-content-between align-items-center">
                            <p>@Traverse.BusinessLogicResults[n - i - 1]</p>
                        </li>
                    }
                </ul>
            </div>
        </div>
    }
</div>

@code{
    private string Feedback { get; set; }
    private string PageUrl { get; set; }
    private string ResultTags { get; set; } = "";
    private bool ShowHtml { get; set; } = true;
    private bool LoadingButton { get; set; } = false;
    private bool FollowThrough { get; set; } = true;
    private int MaxWidth { get; set; } = 20;
    private string PageSource { get; set; }
    
    private HtmlDocument _doc = new HtmlDocument();

    private string _outerHtml = "";
    private List<string> _tags = new List<string>();

    protected async Task LoadHtml()
    {
        
        FakeSeoAnalyzer a = new FakeSeoAnalyzer();
        FakeGoogleKeywordTracker b = new FakeGoogleKeywordTracker();
        await a.Analyze("args");
        await b.Track();

        LoadingButton = true;
        //await Task.Delay(TimeSpan.FromSeconds(0.1));


        if (String.IsNullOrEmpty(PageUrl)) PageUrl = "";
        Regex checkIfValid = new Regex(@"[(http(s)?):\/\/(www\.)?a-zA-Z0-9@:%._\+~#=]{2,256}\.[a-z]{2,6}\b([-a-zA-Z0-9@:%_\+.~#?&//=]*)",
            RegexOptions.Compiled | RegexOptions.IgnoreCase);

        if (checkIfValid.IsMatch(PageUrl))
        {
            Regex checkIfHttps = new Regex(@"^(http|https):\/\/", RegexOptions.Compiled | RegexOptions.IgnoreCase);
            if (!checkIfHttps.IsMatch(PageUrl))
            {
                PageUrl = PageUrl.Insert(0, "https://");
            }
            try
            {
                //PageSource = Chrome.Initialize(PageUrl);
                //_doc.LoadHtml(PageSource);
                ToastService.ShowSuccess("URL is nicely formatted!");
                if (FollowThrough && MaxWidth > 0)
                {
                    Feedback = "Wait..";
                    //Traverse.StateHasChangedDelegate = () => InvokeAsync(StateHasChanged);
                    //Traverse.SetUrl(PageUrl);
                    var watch = System.Diagnostics.Stopwatch.StartNew();
                    //await Traverse.BfsAsync(MaxWidth);
                    watch.Stop();
                    System.Diagnostics.Debug.Print("BFS Async, width " + MaxWidth + " pages = " + (float) watch.ElapsedMilliseconds / 1000 + " seconds\n");
                }
                Feedback = "Done.";
                _outerHtml = PageSource;
                LoadingButton = false;
            }
            catch (Exception e)
            {
                LoadingButton = false;
                ToastService.ShowError("Error!");

                _outerHtml = e.Message;
            }
        }
        else
        {
            LoadingButton = false;
            ToastService.ShowError("URL is not valid!");
        }
    }

    public async void SaveUrl(string fileName, string url)
    {
        PageSource = Chrome.Initialize(url);
        await JSRuntime.InvokeAsync<object>(
            "FileSaveAs",
            fileName, PageSource
            );
    }
    public async void DownloadFile(string fileName)
    {
        await JSRuntime.InvokeAsync<object>(
            "FileSaveAs",
            fileName, ResultTags
            );
    }

    public async void DownloadHtmlFile(string fileName)
    {
        await JSRuntime.InvokeAsync<object>(
            "FileSaveAs",
            fileName, _outerHtml
            );
    }

    async Task KeyPressLoadHtmlInput(KeyboardEventArgs e)
    {
        if (e.Key == "Enter")
        {
            LoadingButton = true;
            await LoadHtml();
        }
    }
}