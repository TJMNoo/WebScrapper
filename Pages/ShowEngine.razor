@page "/showengine"
@using System.Text.RegularExpressions;
@using HtmlAgilityPack
@using WebScraper.Data
@using System.Security.Policy
@using Microsoft.CodeAnalysis.CSharp
@using OpenQA.Selenium
@using WebScraper.Data.FakePlugins
@inject IJSRuntime JSRuntime
@inject IToastService ToastService
@inject ChromeService Chrome

<div class="container" style="width: 70%;">
    <h1 class="text-center" style="margin-bottom: 40px;">Show engine</h1>

    <button @onclick="@LoadHtml" class="btn btn-outline-primary" type="button">CLICK ME & WAIT</button>
    
    <div class="row mt-4">
        <div class="col-sm-4">
            <h4>Analyzer results (docs/hrefs)</h4>
            @for(int i=0; i<analyzerResult.Count; i++)
            {
                <ul>
                    <li>@(i+1) href: @analyzerResult[i]</li>
                </ul>
            }
        </div>
        <div class="col-sm-4">
            <h4>Keyword: rentals new york | Location: US | Pagelimit: 2</h4>
            @for (int i = 0; i < kwfinderResult.Count; i++)
            {
                <ul>
                    <li>@(i+1). html page length: @kwfinderResult[i]</li>
                </ul>
            }
        </div>
        <div class="col-sm-4">
            <h4>Optimizer result (docs)</h4>
            @for (int i = 0; i < optimizerResult.Count; i++)
            {
                <ul>
                    <li>@(i + 1). html page length: @optimizerResult[i]</li>
                </ul>
            }
        </div>
    </div>
</div>

@code{
    private string Feedback { get; set; }
    private string PageUrl { get; set; }
    private string ResultTags { get; set; } = "";
    private bool ShowHtml { get; set; } = true;
    private bool LoadingButton { get; set; } = false;
    private bool FollowThrough { get; set; } = true;
    private int MaxWidth { get; set; } = 20;
    private string PageSource { get; set; }
    private string _outerHtml = "";

    private List<string> analyzerResult = new List<string>();
    private List<int> kwfinderResult = new List<int>();
    private List<int> optimizerResult = new List<int>();


    protected async Task LoadHtml()
    {

        FakeSeoAnalyzer analyzer = new FakeSeoAnalyzer();
        FakeGoogleKeywordTracker kwfinder = new FakeGoogleKeywordTracker();
        FakeOptimizer optimizer = new FakeOptimizer();
        await analyzer.Analyze("args");
        analyzerResult = analyzer.TempResults;
        StateHasChanged();
        
        await kwfinder.Track("args");
        kwfinderResult = kwfinder.TempResults;
        StateHasChanged();

        await optimizer.Optimize("args");
        optimizerResult = optimizer.TempResults;
        StateHasChanged();

        LoadingButton = true;
        await Task.Delay(TimeSpan.FromSeconds(0.1));


        if (String.IsNullOrEmpty(PageUrl)) PageUrl = "";
        Regex checkIfValid = new Regex(@"[(http(s)?):\/\/(www\.)?a-zA-Z0-9@:%._\+~#=]{2,256}\.[a-z]{2,6}\b([-a-zA-Z0-9@:%_\+.~#?&//=]*)",
            RegexOptions.Compiled | RegexOptions.IgnoreCase);

        if (checkIfValid.IsMatch(PageUrl))
        {
            Regex checkIfHttps = new Regex(@"^(http|https):\/\/", RegexOptions.Compiled | RegexOptions.IgnoreCase);
            if (!checkIfHttps.IsMatch(PageUrl))
            {
                PageUrl = PageUrl.Insert(0, "https://");
            }
            try
            {
                //PageSource = Chrome.Initialize(PageUrl);
                ToastService.ShowSuccess("URL is nicely formatted!");
                Feedback = "Done.";
                _outerHtml = PageSource;
                LoadingButton = false;
            }
            catch (Exception e)
            {
                LoadingButton = false;
                ToastService.ShowError("Error!");

                _outerHtml = e.Message;
            }
        }
        else
        {
            LoadingButton = false;
            ToastService.ShowError("URL is not valid!");
        }
    }

    public async void SaveUrl(string fileName, string url)
    {
        PageSource = Chrome.Initialize(url);
        await JSRuntime.InvokeAsync<object>(
            "FileSaveAs",
            fileName, PageSource
            );
    }
    public async void DownloadFile(string fileName)
    {
        await JSRuntime.InvokeAsync<object>(
            "FileSaveAs",
            fileName, ResultTags
            );
    }

    public async void DownloadHtmlFile(string fileName)
    {
        await JSRuntime.InvokeAsync<object>(
            "FileSaveAs",
            fileName, _outerHtml
            );
    }

    async Task KeyPressLoadHtmlInput(KeyboardEventArgs e)
    {
        if (e.Key == "Enter")
        {
            LoadingButton = true;
            await LoadHtml();
        }
    }
}